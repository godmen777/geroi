( function(){

    "use strict";

    $(function(){

        $.each( $( '.menu' ), function() {
            new Menu ( $( this ) );
        } );

        $.each( $( '.site__header' ), function() {
            new Header ( $( this ) );
        } );

        $.each( $( '.place' ), function() {
            new Place ( $( this ) );
        } );

    } );

    var Menu = function( obj ) {

        //private properties
        var _obj = obj,
            _mobileBtn = $( '.menu-mobile-btn' ),
            _closeBtn = _obj.find( '.menu-close-btn' ),
            _body = $( 'body' ),
            _site = _body.find( '.site' ),
            _siteHead = _site.find( '.site__header' ),
            _window = $( window ),
            _position = 0;

        //private methods
        var _onEvent = function() {

                _mobileBtn.on( 'click', function () {
                    _showMobileMenu();
                    return false;
                } );

                _closeBtn.on( 'click', function () {
                    _hideMobileMenu();
                    return false;
                } );

            },
            _hideMobileMenu = function () {

                _obj.removeClass( 'show' );

                _body.removeAttr( 'style' );
                _site.removeAttr( 'style' );
                _siteHead.removeClass( 'open-menu' );

                _window.scrollTop( _position );

            },
            _showMobileMenu = function () {

                _obj.addClass( 'show' );

                _position = _window.scrollTop();

                _body.css( 'overflow-y', 'hidden' );

                _site.css( {
                    'position': 'relative',
                    'top': _position * -1
                } );

                _siteHead.addClass( 'open-menu' );

            },
            _init = function() {
                _onEvent();
            };

        //public properties

        //public methods

        _init();
    };

    var Header = function( obj ) {

        //private properties
        var _obj = obj,
            _hero = $( '.hero' ),
            _heroBottomSet = 0,
            _headerBottomSet = 0,
            _window = $( window );

            if ( _hero.length > 0 ){

                _heroBottomSet = _hero.offset().top + _hero.outerHeight();
                _headerBottomSet = _obj.offset().top + _obj.outerHeight();

            }

        //private methods
        var _onEvent = function() {

                _window.on( 'scroll', function () {
                    _checkScroll();
                } );

            },
            _checkScroll = function () {

                if ( _headerBottomSet * 5 < _window.scrollTop() && _window.scrollTop() < _heroBottomSet ){
                    _hideHeader();
                } else if ( _window.scrollTop() > _heroBottomSet ) {
                    _fixedHeader();
                } else {
                    _headerOnTop();
                }

            },
            _hideHeader = function () {
                _obj.addClass( 'hide' );
            },
            _fixedHeader = function () {
                _obj.addClass( 'fixed' );
                _obj.removeClass( 'hide' );
            },
            _headerOnTop = function () {
                _obj.removeClass( 'hide' );
                _obj.removeClass( 'fixed' );
            },
            _init = function() {
                _onEvent();
                _checkScroll();
            };

        //public properties

        //public methods

        _init();
    };

    var Place = function( obj ) {

        //private properties
        var _obj = obj,
            _curCity = _obj.find( '.place__current' ),
            _citiesPopup = _obj.find( '.place__popup' ),
            _citiesWrap = _citiesPopup.find( '.place__cities' ),
            _listCountries = _citiesPopup.find( '.place__countries' ),
            _countriesSlide = _listCountries.find( '.swiper-slide' ),
            _listCountryItem = _listCountries.find( '.place__countries-item' ),
            _closePopup = _citiesPopup.find( '.place__popup-close' ),
            _body = $( 'body' ),
            _site = $( '.site' ),
            _siteHead = _site.find( '.site__header' ),
            _window = $( window ),
            _position = 0,
            _swiperCountries,
            _request = new XMLHttpRequest();

        //private methods
        var _onEvent = function() {

                _site.on( 'click', function ( e ) {
                    if ( _obj.hasClass( 'show' ) && $( e.target ).closest( _obj ).length == 0 && _window.width() <= 1200 ){
                        _hidePopupOnMobile();
                    }
                } );

                _curCity.on( 'click', function () {

                    if ( !_siteHead.hasClass( 'open-menu' ) ) {
                        _showPopupOnMobile();
                    }

                } );

                _closePopup.on( 'click', function () {
                    _hidePopupOnMobile();
                    return false;
                } );

                _listCountryItem.on( 'click', function () {

                    var cutCountry = $( this );

                    _ajaxRequest( cutCountry );

                    _listCountryItem.removeClass( 'active' );
                    cutCountry.addClass( 'active' );

                    return false;
                } );

            },
            _ajaxRequest = function( countryObj ) {

                var cutCountry = countryObj,
                    cutCountryId = cutCountry.data( 'country' );

                _request = $.ajax( {
                    url: 'php/city.geo.php',
                    data: {
                        country_id: cutCountryId
                    },
                    dataType: 'json',
                    type: 'GET',
                    success: function ( data ) {
                        _constructData( data );
                    },
                    error: function ( XMLHttpRequest ) {
                        if ( XMLHttpRequest.statusText != "abort" ) {
                            console.log( 'err' );
                        }
                    }
                } );

            },
            _checkActiveTab = function () {

                if ( _listCountryItem.filter( 'active' ).length == 0 ){

                    _listCountryItem.eq( 0 ).trigger( 'click' );

                }

            },
            _constructData = function ( data ) {

                _citiesWrap.empty();

                $.each( data, function ( i ) {

                    var list = $( '<dl></dl>' );

                    for ( var n = 0; n < data.length; n++ ) {

                        list.append( '<dt>'+ data[ i ][ n ].group +'</dt>' );
                        list.append( _appendCities( data[ i ][ n ].city ) );

                    };

                    _citiesWrap.append( list );

                } );

            },
            _appendCities = function ( data ) {

                var list = $( '<dd></dd>' );

                for ( var i = 0; i < data.length; i++ ) {

                    list.append( '<a href="'+ data[ i ].link +'">'+ data[ i ].name  +'</a>' );

                };

                return list;

            },
            _getScrollWidth = function (){
                var scrollDiv = document.createElement( 'div'),
                    scrollBarWidth;

                scrollDiv.className = 'place__scrollbar-measure';

                document.body.appendChild( scrollDiv );

                scrollBarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;

                document.body.removeChild(scrollDiv);

                return scrollBarWidth;
            },
            _showPopupOnMobile = function () {

                _obj.addClass( 'show' );

                _position = _window.scrollTop();

                var headerRightPadding = +( _siteHead.css( 'padding-right' ).replace( 'px', '' ) ),
                    headerLeftPadding = +( _siteHead.css( 'padding-left' ).replace( 'px', '' ) );

                _body.css( 'overflow-y', 'hidden' );

                _site.css( {
                    'position': 'relative',
                    'top': _position * -1
                } );

                _siteHead.addClass( 'open-menu' );

                if ( _window.outerWidth() >= 768 ){

                    _siteHead.css( {
                        'padding-left': headerLeftPadding,
                        'padding-right': headerRightPadding + _getScrollWidth()
                    } );

                    _citiesPopup.css( {
                        'padding-left': headerLeftPadding,
                        'padding-right': headerRightPadding + _getScrollWidth() + 17
                    } );

                    _closePopup.css( 'right', headerRightPadding + _getScrollWidth() );

                }

                _citiesWrap.niceScroll( {
                    cursorcolor: "#2f2f2f",
                    cursorwidth: "4px",
                    cursorborder: "0",
                    background: "#1a1a1a",
                    autohidemode: false
                } );

            },
            _hidePopupOnMobile = function () {

                _obj.removeClass( 'show' );

                _body.removeAttr( 'style' );
                _site.removeAttr( 'style' );
                _siteHead.removeClass( 'open-menu' );
                _siteHead.removeAttr( 'style' );

                console.log( _position )

                _window.scrollTop( _position );

                _citiesWrap.niceScroll( 'destroy' );

            },
            _initScheduleScroll = function () {

                if ( _countriesSlide.outerWidth() > _listCountries.outerWidth() ) {

                    _swiperCountries = new Swiper( _listCountries, {
                        direction: 'horizontal',
                        slidesPerView: 'auto',
                        freeMode: true,
                        mousewheel: true
                    } );

                }

            },
            _init = function() {
                _onEvent();
                _checkActiveTab();
                _initScheduleScroll();
            };

        //public properties

        //public methods

        _init();
    };

} )();
( function(){

    "use strict";

    $(function(){

        $.each( $( '.hero, .gratitude' ), function() {
            new Sliders ( $( this ) );
        } );

        $.each( $( '.schedule__month' ), function() {
            new Schedule ( $( this ) );
        } );

        $.each( $( '.subscribe' ), function() {
            new SubscribeForm ( $( this ) );
        } );

        $.each( $( '.popup__add' ), function() {
            new AddForm ( $( this ) );
        } );

        $.each( $( '.popup__event' ), function() {
            new EventForm ( $( this ) );
        } );

        $.each( $( '.popup__help' ), function() {
            new HelpForm ( $( this ) );
        } );

        $.each( $( '.popup__volunteer' ), function() {
            new VolunteerForm ( $( this ) );
        } );

    });

    var Schedule = function( obj ) {

        //private properties
        var _obj = obj,
            _now = new Date(),
            _currentYear = _now.getFullYear(),
            _currentMonth = _now.getMonth(),
            _options = { month: 'long' },
            _monthTitle = _obj.find( '.schedule__month-name' ),
            _monthDaysWrap = _obj.find( '.schedule__month-days' ),
            _monthDaysSlide = _monthDaysWrap.find( '.swiper-slide' ),
            _scrollDays = _monthDaysWrap.find( '.schedule__month-scrollbar' ),
            _schedulePlan = _obj.find( '.schedule__plan' ),
            _schedulePlanSlide = _schedulePlan.find( '.schedule__plan-slide' ),
            _scrollSchedule = _schedulePlan.find( '.schedule__plan-scrollbar' ),
            _dateBtn, _swiperSchedule, _swiperCalendar,
            _window = $( window ),
            _request = new XMLHttpRequest();

        //private methods
        var _ajaxRequest = function( year, month, date ) {

                _request = $.ajax( {
                    url: 'php/schedule.php',
                    data: {
                        year: year,
                        month: month,
                        date: date
                    },
                    dataType: 'json',
                    type: 'GET',
                    success: function ( data ) {

                        _loadData( data );

                    },
                    error: function ( XMLHttpRequest ) {
                        if ( XMLHttpRequest.statusText != "abort" ) {
                            console.log( 'err' );
                        }
                    }
                } );

            },
            _initCalendarScroll = function () {

                _swiperCalendar = new Swiper( _monthDaysWrap, {
                    direction: 'horizontal',
                    slidesPerView: 'auto',
                    freeMode: true,
                    scrollbar: _scrollDays,
                    mousewheel: true
                } );

            },
            _getLocalDay = function ( date ) {

                var day = date.getDay();

                if ( day == 0 ) {
                    day = 7;
                }

                return day;

            },
            _getLastDayOfMonth = function ( year, month ) {
                var date = new Date( year, month + 1, 0 );
                return date.getDate();
            },
            _setCalendar = function () {

                _monthTitle.text( _now.toLocaleString( "ru", _options ) );

                for ( var i = 1; i <= _getLastDayOfMonth( _currentYear, _currentMonth ); i++ ) {

                    var weekDay =  _getLocalDay( new Date( _currentYear, _currentMonth, i ) );

                    if ( weekDay == 6 || weekDay == 7 ) {
                        _monthDaysSlide.append( '<a href="#" class="weekend">'+ i +'</a>' );
                    } else {
                        _monthDaysSlide.append( '<a href="#">'+ i +'</a>' );
                    }

                }

                _dateBtn = _monthDaysSlide.find( 'a' );

                _onEvent();

                _dateBtn.eq( _now.getDate() ).addClass( 'today' ).trigger( 'click' );

                if ( _window.outerWidth() < 1170 ){

                    _initCalendarScroll();

                }

            },
            _loadData = function ( data ) {

                _schedulePlanSlide.empty();

                if ( _swiperSchedule != undefined ){
                    _schedulePlan[ 0 ].swiper.destroy( false, true );
                }

                var arr = data.items,
                    number = arr.length;

                if ( number > 0 ){

                    for ( var i = 0; i < number; i++ ){

                        _schedulePlanSlide.append( '<a href="'+ arr[i].link +'" class="schedule__plan-item">'+ arr[i].title +'</a>' );

                    }
                    _scrollSchedule.removeAttr( 'style' );
                    _initScheduleScroll();

                } else {

                    _schedulePlanSlide.html( '<div class="schedule__plan-item empty">Сегодня событий нет</div>' );
                    _scrollSchedule.css( 'visibility', 'hidden' )

                }

            },
            _initScheduleScroll = function () {

                _swiperSchedule = new Swiper( _schedulePlan, {
                    direction: 'horizontal',
                    slidesPerView: 'auto',
                    freeMode: true,
                    scrollbar: _scrollSchedule,
                    mousewheel: true
                } );

            },
            _onEvent = function() {

                _dateBtn.on( 'click', function () {

                    var curElem = $( this );

                    _dateBtn.removeClass( 'active' );
                    curElem.addClass( 'active' );

                    _ajaxRequest( _currentYear, _currentMonth, curElem.text() );

                    return false;

                } );

            },
            _init = function() {
                _setCalendar();
            };

        //public properties

        //public methods

        _init();
    };

    var Sliders = function( obj ) {

        //private properties
        var _obj = obj,
            _heroSlider = _obj.find( '.hero__slider' ),
            _gratitudeSlider = _obj.find( '.gratitude__list' ),
            _heroSlide = _heroSlider.find( '.hero__slide' ),
            _heroPagination = _obj.find( '.hero__pagination' ),
            _gratitudePagination = _obj.find( '.gratitude__pagination' ),
            _hero,
            _gratitude;

        //private methods
        var _initSlider = function() {

                if ( _heroSlide.length > 1 ) {

                    _hero = new Swiper ( _heroSlider, {
                        effect: 'slide',
                        autoplay: 2500,
                        speed: 500,
                        slidesPerView: 1,
                        loop: true,
                        pagination: _heroPagination,
                        paginationClickable: true
                    } );

                }

                _gratitude = new Swiper ( _gratitudeSlider, {
                    effect: 'fade',
                    autoplay: 2000,
                    speed: 500,
                    slidesPerView: 1,
                    loop: true,
                    pagination: _gratitudePagination,
                    paginationClickable: true
                } );

            },
            _init = function() {
                _initSlider();
            };

        //public properties

        //public methods

        _init();
    };

    var SubscribeForm = function( obj ){

        //private properties
        var _obj = obj,
            _emailFielder = _obj.find( 'input[type=email]' ),
            _btn = _obj.find( 'button' ),
            _successMessage = _obj.find( '.subscribe__success' ),
            _validation = new FormValidator( _obj );

        //private methods
        var _init = function(){
                _onEvent();
            },
            _onEvent = function(){

                _obj.on( 'submit', function () {

                    if ( _validation.valid == true ) {
                        _ajaxSend();
                    }

                    return false;

                } );

            },
            _ajaxSend = function(){

                $.ajax( {
                    url: 'php/sender.php',
                    dataType: 'html',
                    timeout: 20000,
                    type: "POST",
                    data: {
                        email: _emailFielder.val()
                    },
                    success: function () {

                        _showSuccessMessage();

                    },
                    error: function (XMLHttpRequest) {
                        if (XMLHttpRequest.statusText != 'abort') {
                            alert(XMLHttpRequest.statusText);
                        }
                    }
                } );
                return false;

            },
            _showSuccessMessage = function () {

                _successMessage.addClass( 'show' );

                _obj[0].reset();

                setTimeout( function () {
                    _successMessage.removeClass( 'show' );
                }, 4000 );

            };

        //public properties

        //public methods

        _init();

    };

    var AddForm = function( obj ){

        //private properties
        var _obj = obj,
            _emailFielder = _obj.find( 'input[type=email]' ),
            _urlFielder = _obj.find( 'input[type=text]' ),
            _messageFielder = _obj.find( 'textarea' ),
            _btn = _obj.find( 'button' ),
            _successMessage = _obj.find( '.popup__success' ),
            _validation = new FormValidator( _obj );

        //private methods
        var _init = function(){
                _onEvent();
            },
            _onEvent = function(){

                _obj.on( 'submit', function () {

                    if ( _validation.valid == true ) {
                        _ajaxSend();
                    }

                    return false;

                } );

            },
            _ajaxSend = function(){

                $.ajax( {
                    url: 'php/sender.php',
                    dataType: 'html',
                    timeout: 20000,
                    type: "POST",
                    data: {
                        email: _emailFielder.val(),
                        url: _urlFielder.val(),
                        message: _messageFielder.val()
                    },
                    success: function () {

                        _showSuccessMessage();

                    },
                    error: function (XMLHttpRequest) {
                        if (XMLHttpRequest.statusText != 'abort') {
                            alert(XMLHttpRequest.statusText);
                        }
                    }
                } );
                return false;

            },
            _showSuccessMessage = function () {

                _successMessage.addClass( 'show' );

                _obj[0].reset();

                setTimeout( function () {
                    $( '.popup' )[0].obj.close(0);

                    setTimeout( function () {
                        _successMessage.removeClass('show');
                    }, 300 );

                }, 2000 );

            };

        //public properties

        //public methods

        _init();

    };

    var EventForm = function( obj ){

        //private properties
        var _obj = obj,
            _emailFielder = _obj.find( 'input[type=email]' ),
            _urlFielder = _obj.find( 'input[type=text]' ),
            _messageFielder = _obj.find( 'textarea' ),
            _btn = _obj.find( 'button' ),
            _successMessage = _obj.find( '.popup__success' ),
            _validation = new FormValidator( _obj );

        //private methods
        var _init = function(){
                _onEvent();
            },
            _onEvent = function(){

                _obj.on( 'submit', function () {

                    if ( _validation.valid == true ) {
                        _ajaxSend();
                    }

                    return false;

                } );

            },
            _ajaxSend = function(){

                $.ajax( {
                    url: 'php/sender.php',
                    dataType: 'html',
                    timeout: 20000,
                    type: "POST",
                    data: {
                        email: _emailFielder.val(),
                        palce: _urlFielder.val(),
                        message: _messageFielder.val()
                    },
                    success: function () {

                        _showSuccessMessage();

                    },
                    error: function (XMLHttpRequest) {
                        if (XMLHttpRequest.statusText != 'abort') {
                            alert(XMLHttpRequest.statusText);
                        }
                    }
                } );
                return false;

            },
            _showSuccessMessage = function () {

                _successMessage.addClass( 'show' );

                _obj[0].reset();

                setTimeout( function () {
                    $( '.popup' )[0].obj.close(0);

                    setTimeout( function () {
                        _successMessage.removeClass('show');
                    }, 300 );

                }, 2000 );

            };

        //public properties

        //public methods

        _init();

    };

    var HelpForm = function( obj ){

        //private properties
        var _obj = obj,
            _emailFielder = _obj.find( 'input[type=email]' ),
            _urlFielder = _obj.find( 'input[type=text]' ),
            _messageFielder = _obj.find( 'textarea' ),
            _btn = _obj.find( 'button' ),
            _successMessage = _obj.find( '.popup__success' ),
            _validation = new FormValidator( _obj );

        //private methods
        var _init = function(){
                _onEvent();
            },
            _onEvent = function(){

                _obj.on( 'submit', function () {

                    if ( _validation.valid == true ) {
                        _ajaxSend();
                    }

                    return false;

                } );

            },
            _ajaxSend = function(){

                $.ajax( {
                    url: 'php/sender.php',
                    dataType: 'html',
                    timeout: 20000,
                    type: "POST",
                    data: {
                        email: _emailFielder.val(),
                        palce: _urlFielder.val(),
                        message: _messageFielder.val()
                    },
                    success: function () {

                        _showSuccessMessage();

                    },
                    error: function (XMLHttpRequest) {
                        if (XMLHttpRequest.statusText != 'abort') {
                            alert(XMLHttpRequest.statusText);
                        }
                    }
                } );
                return false;

            },
            _showSuccessMessage = function () {

                _successMessage.addClass( 'show' );

                _obj[0].reset();

                setTimeout( function () {
                    $( '.popup' )[0].obj.close(0);

                    setTimeout( function () {
                        _successMessage.removeClass('show');
                    }, 300 );

                }, 2000 );

            };

        //public properties

        //public methods

        _init();

    };

    var VolunteerForm = function( obj ){

        //private properties
        var _obj = obj,
            _emailFielder = _obj.find( 'input[type=email]' ),
            _urlFielder = _obj.find( 'input[type=text]' ),
            _messageFielder = _obj.find( 'textarea' ),
            _btn = _obj.find( 'button' ),
            _successMessage = _obj.find( '.popup__success' ),
            _validation = new FormValidator( _obj );

        //private methods
        var _init = function(){
                _onEvent();
            },
            _onEvent = function(){

                _obj.on( 'submit', function () {

                    if ( _validation.valid == true ) {
                        _ajaxSend();
                    }

                    return false;

                } );

            },
            _ajaxSend = function(){

                $.ajax( {
                    url: 'php/sender.php',
                    dataType: 'html',
                    timeout: 20000,
                    type: "POST",
                    data: {
                        email: _emailFielder.val(),
                        palce: _urlFielder.val(),
                        message: _messageFielder.val()
                    },
                    success: function () {

                        _showSuccessMessage();

                    },
                    error: function (XMLHttpRequest) {
                        if (XMLHttpRequest.statusText != 'abort') {
                            alert(XMLHttpRequest.statusText);
                        }
                    }
                } );
                return false;

            },
            _showSuccessMessage = function () {

                _successMessage.addClass( 'show' );

                _obj[0].reset();

                setTimeout( function () {
                    $( '.popup' )[0].obj.close(0);

                    setTimeout( function () {
                        _successMessage.removeClass('show');
                    }, 300 );

                }, 2000 );

            };

        //public properties

        //public methods

        _init();

    };

} )();
var FormValidator = function (obj) {

    //private properties
    var _obj = obj,
        _self = this,
        _inputs = _obj.find( 'input, textarea' ),
        _fields = _obj.find( '[data-required]' ),
        _checkbox = _obj.find( 'input[type=checkbox]' );

    //private methods
    var _init = function () {
            _onEvents();
            _obj[ 0 ].obj = _self;
        },
        _addNotTouchedClass = function () {

            _fields.each( function() {

                var curItem = $(this);

                if( curItem.val() === '' || !curItem.is( ':checked' ) ){

                    curItem.addClass( 'not-touched' );

                    _validateField( curItem );

                }

                if ( curItem.hasClass( 'valid' ) ){
                    curItem.removeClass( 'not-touched' );
                }

            } );

        },
        _onEvents = function () {
            _fields.on( {
                focus: function() {

                    $( this ).removeClass( 'not-touched' );

                },
                focusout: function() {

                    var curItem = $(this);

                    _validateField( curItem );

                },
                keyup: function () {

                    var curItem = $(this);

                    if ( curItem.hasClass( 'not-valid' ) ){
                        _validateField( curItem );
                    }

                }
            } );
            _inputs.on( {
                focusout: function() {

                    var letterCounter = 0;

                    _inputs.each( function () {

                        var curItem = $(this);

                        if ( curItem.val().length > 0 ){
                            letterCounter = letterCounter + 1
                        }

                    } );

                    if ( letterCounter === 0 ) {
                        _inputs.removeClass( 'not-valid' );
                        _self.valid = false;
                    }

                }
            } );
            _obj.on( {
                submit: function() {

                    _addNotTouchedClass();

                    if( !(_fields.filter( '.not-valid' ).length === 0) ) {
                        _self.valid = false;
                    }

                    if( _fields.hasClass( 'not-touched' ) || _fields.hasClass( 'not-valid' ) ) {
                        _obj.find('.not-touched:first').focus();
                        _obj.find('.not-valid:first').focus();
                        _self.valid = false;
                        return false;
                    };

                }
            } );
            _checkbox.on( 'change', function () {

                $( this ).removeClass( 'not-valid not-touched' );

            } );
        },
        _makeNotValid = function ( field ) {
            field.addClass( 'not-valid' );
            field.removeClass( 'valid' );
        },
        _makeValid = function ( field ) {
            field.removeClass( 'not-valid' );
            field.addClass( 'valid' );
        },
        _validateEmail = function ( email ) {
            var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(email);
        },
        _validateField = function ( field ) {

            var type = field.attr( 'type' ),
                tagName = field[0].tagName;

            if( type === 'email' || type === 'text'  || type === 'tel' ){

                if( field.val() === '' ){
                    _makeNotValid( field );
                    _self.valid = false;
                    return false;
                }

            }

            if( type === 'email' ){
                if( !_validateEmail( field.val() ) ){
                    _makeNotValid( field );
                    _self.valid = false;
                    return false;
                }
            }

            if( type === 'checkbox' ){

                if( !field.is( ':checked' ) ){
                    _makeNotValid( field );
                    _self.valid = false;
                    return false;
                }

            }

            if( tagName.toLocaleLowerCase() == 'textarea' ){

                if( field.val() === '' ){
                    _makeNotValid( field );
                    _self.valid = false;
                    return false;
                }

            }

            _makeValid( field );

            if( _fields.filter( '.not-valid' ).length === 0 ) {

                _self.valid = true;

            }

        };

    //public properties
    _self.valid = false;

    _init();
};
( function(){

    $( function(){

        $( '.popup' ).each(function(){

            new Popup($(this));

        });

    });

    var Popup = function( obj ){

        //private properties
        var _self = this,
            _btnShow =  $( '.popup__open' ),
            _obj = obj,
            _btnClose = _obj.find( '.popup__close, .popup__cancel' ),
            _wrap = _obj.find( '.popup__wrap' ),
            _contents = _obj.find( '.popup__content' ),
            _scrollConteiner = $( 'html' ),
            _window = $( window ),
            _timer = setTimeout( function(){}, 1 );

        //private methods
        var _centerWrap = function(){
                if ( _wrap.outerHeight() < _window.outerHeight() && _window.outerWidth() >= 768 ) {
                    _wrap.css( { top: ( _window.outerHeight() - _wrap.outerHeight() ) / 2 } );
                } else {
                    _wrap.css( { top: 0 } );
                }
            },
            _getScrollWidth = function (){
                var scrollDiv = document.createElement( 'div'),
                    scrollBarWidth;

                scrollDiv.className = 'popup__scrollbar-measure';

                document.body.appendChild( scrollDiv );

                scrollBarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;

                document.body.removeChild(scrollDiv);

                return scrollBarWidth;
            },
            _hide = function(){
                _obj.css( {
                    overflowY: 'hidden'
                } );
                _scrollConteiner.css( {
                    overflowY: 'auto',
                    paddingRight: 0
                } );

                _obj.removeClass( 'popup_opened' );
                _obj.addClass( 'popup_hide' );

                _timer = setTimeout( function(){

                    _obj.css ({
                        overflowY: 'auto'
                    });

                    _obj.removeClass( 'popup_hide' );
                }, 300 );

            },
            _init = function(){
                _obj[ 0 ].obj = _self;
                _onEvents();
            },
            _onEvents = function(){
                _window.on( {
                    resize: function(){
                        _centerWrap();
                    }
                } );
                _btnShow.on( {
                    click: function(){
                        _show( $( this ).attr( 'data-popup' ) );
                        return false;
                    }
                } );
                _wrap.on( {
                    click: function( e ){
                        e.stopPropagation();
                    }
                } );
                _obj.on( {
                    click: function(){
                        _hide();
                        return false;
                    }
                } );
                _btnClose.on( {
                    click: function(){
                        _hide();
                        return false;
                    }
                } );
            },
            _show = function( className ){
                _setPopupContent( className );

                _scrollConteiner.css( {
                    overflowY: 'hidden',
                    paddingRight: _getScrollWidth()
                } );
                _obj.addClass( 'popup_opened' );
                _centerWrap();

            },
            _setPopupContent = function( className ){
                var curContent = _contents.filter( '.popup__' + className );

                _contents.css( { display: 'none' } );
                curContent.css( { display: 'block' } );
            };

        //public properties

        //public methods
        _self.close = function(){
            _hide();
        };

        _init();
    };

} )();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
